// Generated by CoffeeScript 1.9.2
var Calendar;

Calendar = function() {
  var buildCalendar, clicked_day, container, create_task, currentMonth, current_month, current_year, dayHTML, executor_tasks_count, id, initialize, manager_tasks_count, month, nextMonth, next_month, prepare_date, previousMonth, previous_month, reload, show_tasks, tasks, year;
  year = month = next_month = current_month = previous_month = current_year = container = id = void 0;
  tasks = {};
  manager_tasks_count = executor_tasks_count = 0;
  dayHTML = clicked_day = void 0;
  initialize = function(obj) {
    var dateToSend;
    dayHTML = "<div></div>";
    month = parseInt(obj.month) || new Date().getMonth() + 1;
    year = parseInt(obj.year) || new Date().getFullYear();
    if (obj.container) {
      container = $(obj.container);
    }
    current_year = year;
    current_month = month - 1;
    previous_month = current_month - 1;
    next_month = current_month + 1;
    if (obj.ajax) {
      dateToSend = year + "-" + month + "-" + 1;
      return $.ajax({
        type: "GET",
        url: "/get_tasks.json",
        data: {
          date: dateToSend
        },
        async: false,
        success: (function(data, status) {
          tasks = data;
          id = data.id;
          tasks.executor = tasks.executor.join("|");
          return tasks.manager = tasks.manager.join("|");
        }),
        error: (function(jqxhr, textStatus, error) {
          var err;
          err = textStatus + ", " + error;
          return console.log("Request Failed: " + err);
        })
      });
    }
  };
  $.fn.highlight = function() {
    return this.parent().addClass("highlight");
  };
  prepare_date = function(data) {
    var date, key;
    for (key in data) {
      if (key === "dayCur") {
        date = current_year + "-" + (current_month + 1) + "-" + data[key];
      }
      if (key === "dayPr") {
        date = current_year + "-" + (previous_month + 1) + "-" + data[key];
      }
      if (key === "dayNext") {
        date = current_year + "-" + (next_month + 1) + "-" + data[key];
      }
    }
    return date;
  };
  create_task = function(data) {
    return $.ajax({
      url: "/create_task",
      type: "GET",
      data: {
        date: data
      },
      success: (function(data, status) {}),
      error: (function(jqxhr, textStatus, error) {
        var err;
        err = textStatus + ", " + error;
        return console.log("Request Failed: " + err);
      })
    });
  };
  show_tasks = function(data) {
    return $.ajax({
      url: "/users/" + id + "/tasks_of_day",
      type: "GET",
      data: {
        date: data
      },
      success: function(data, status) {},
      error: function(jqxhr, textStatus, error) {
        var err;
        err = textStatus + ", " + error;
        return console.log("Request Failed: " + err);
      }
    });
  };
  currentMonth = function() {
    var allDaysHTML, date, firstDayofMonth, maxDays, z;
    maxDays = new Date(current_year, next_month, 0).getDate();
    firstDayofMonth = new Date(current_year, current_month, 1).getDay();
    if (firstDayofMonth === 0) {
      firstDayofMonth = 7;
    }
    allDaysHTML = '';
    z = 0;
    while (maxDays > z) {
      allDaysHTML = allDaysHTML + dayHTML;
      z++;
    }
    return date = {
      month: current_month,
      year: current_year,
      days: maxDays,
      html: allDaysHTML,
      firstDayofMonth: firstDayofMonth
    };
  };
  previousMonth = function(classCSS) {
    var allDaysHTML, date, firstDayofCurrentMonth, firstOfAddedDays, maxDays, z;
    allDaysHTML = '';
    if (classCSS) {
      dayHTML = "<div class='" + classCSS + "'></div>";
    }
    maxDays = new Date(current_year, current_month, 0).getDate();
    firstDayofCurrentMonth = currentMonth().firstDayofMonth;
    firstOfAddedDays = maxDays - firstDayofCurrentMonth + 2;
    z = 1;
    while (firstDayofCurrentMonth > z) {
      allDaysHTML = allDaysHTML + dayHTML;
      z++;
    }
    return date = {
      lastDayOfMonthHTML: allDaysHTML,
      days: maxDays,
      countAddDays: firstDayofCurrentMonth - 1,
      firstOfAddedDays: firstOfAddedDays
    };
  };
  nextMonth = function(classCSS) {
    var allDaysHTML, date, needAddDays, z;
    needAddDays = 7 - ((previousMonth().countAddDays + currentMonth().days) % 7);
    if (needAddDays === 7) {
      needAddDays = 0;
    }
    allDaysHTML = '';
    if (classCSS) {
      dayHTML = "<div class='" + classCSS + "'></div>";
    }
    z = 0;
    while (needAddDays > z) {
      allDaysHTML = allDaysHTML + dayHTML;
      z++;
    }
    return date = {
      needAddDays: needAddDays,
      html: allDaysHTML
    };
  };
  reload = function() {
    return buildCalendar({
      ajax: true,
      month: $(".dropdown-togle-month").attr("mn"),
      year: $(".dropdown-togle-year").text()
    });
  };
  return buildCalendar = function(obj) {
    var $calendar, countAddDays, firstOfAddedDays;
    initialize(obj);
    $calendar = container || $("#container_calendar");
    $calendar.html(currentMonth().html);
    $calendar.children().each(function(index) {
      var $calendar_day_container, correct_index, monthReg, regexp;
      if (index < 9) {
        correct_index = "0" + (index + 1);
      } else {
        correct_index = index + 1;
      }
      if (current_month < 9) {
        monthReg = "0" + (current_month + 1);
      } else {
        monthReg = current_month + 1;
      }
      regexp = RegExp(current_year + "\\-" + monthReg + "\\-" + correct_index, "g");
      if (tasks.executor) {
        if (tasks.executor.match(regexp)) {
          executor_tasks_count = tasks.executor.match(regexp).length;
        }
      }
      if (tasks.manager) {
        if (tasks.manager.match(regexp)) {
          manager_tasks_count = tasks.manager.match(regexp).length;
        }
      }
      $(this).addClass("calendar_day_wrapper col-xs-1 col-sm-1 col-md-1 col-lg-1").append(document.createElement("div"));
      $(this).append($("<div/>", {
        "class": "dummy"
      }));
      $calendar_day_container = $(this).children().first();
      $calendar_day_container.addClass("calendar_day_container").attr("data-day-cur", correct_index);
      $calendar_day_container.append($("<span/>", {
        "class": "day_number",
        text: index + 1
      }));
      if (manager_tasks_count) {
        $calendar_day_container.append($("<span/>", {
          text: manager_tasks_count,
          id: "man_task"
        })).highlight();
      }
      if (executor_tasks_count) {
        $calendar_day_container.append($("<span/>", {
          text: executor_tasks_count,
          id: "exec_task"
        })).highlight();
      }
      return manager_tasks_count = executor_tasks_count = 0;
    });
    if (currentMonth().firstDayofMonth > 1) {
      countAddDays = previousMonth().countAddDays;
      $calendar.prepend(previousMonth().lastDayOfMonthHTML);
      firstOfAddedDays = previousMonth().firstOfAddedDays;
      $calendar.children().each(function(index) {
        var $calendar_day_container, monthReg, regexp;
        if (previous_month < 9) {
          monthReg = "0" + (previous_month + 1);
        } else {
          monthReg = previous_month + 1;
        }
        regexp = RegExp(current_year + "\\-" + monthReg + "\\-" + firstOfAddedDays, "g");
        if (tasks.executor) {
          if (tasks.executor.match(regexp)) {
            executor_tasks_count = tasks.executor.match(regexp).length;
          }
        }
        if (tasks.manager) {
          if (tasks.manager.match(regexp)) {
            manager_tasks_count = tasks.manager.match(regexp).length;
          }
        }
        if (index === countAddDays) {
          return false;
        }
        $(this).addClass("calendar_day_wrapper col-xs-1 col-sm-1 col-md-1 col-lg-1 pr").append(document.createElement("div"));
        $(this).append($("<div/>", {
          "class": "dummy"
        }));
        $calendar_day_container = $(this).children().first();
        $calendar_day_container.addClass("calendar_day_container").attr("data-day-pr", firstOfAddedDays);
        $calendar_day_container.append($("<span/>", {
          "class": "day_number",
          text: firstOfAddedDays
        }));
        if (manager_tasks_count) {
          $calendar_day_container.append($("<span/>", {
            text: manager_tasks_count,
            id: "man_task"
          })).highlight();
        }
        if (executor_tasks_count) {
          $calendar_day_container.append($("<span/>", {
            text: executor_tasks_count,
            id: "exec_task"
          })).highlight();
        }
        manager_tasks_count = executor_tasks_count = 0;
        return firstOfAddedDays++;
      });
    }
    $calendar.append(nextMonth("next").html);
    $calendar.children(".next").addClass("calendar_day_wrapper col-xs-1 col-sm-1 col-md-1 col-lg-1").each(function(index) {
      var $calendar_day_container, correct_index, monthReg, regexp;
      correct_index = "0" + (index + 1);
      if (next_month < 9) {
        monthReg = "0" + (next_month + 1);
      } else {
        monthReg = next_month + 1;
      }
      regexp = RegExp(current_year + "\\-" + monthReg + "\\-" + correct_index, "g");
      if (tasks.executor) {
        if (tasks.executor.match(regexp)) {
          executor_tasks_count = tasks.executor.match(regexp).length;
        }
      }
      if (tasks.manager) {
        if (tasks.manager.match(regexp)) {
          manager_tasks_count = tasks.manager.match(regexp).length;
        }
      }
      $(this).append($("<div/>", {
        "class": "calendar_day_container",
        "data-day-next": correct_index
      })).append($("<div/>", {
        "class": "dummy"
      }));
      $calendar_day_container = $(this).children().first();
      $calendar_day_container.append($("<span/>", {
        "class": "day_number",
        text: index + 1
      }));
      if (manager_tasks_count) {
        $calendar_day_container.append($("<span/>", {
          text: manager_tasks_count,
          id: "man_task"
        })).highlight();
      }
      if (executor_tasks_count) {
        $calendar_day_container.append($("<span/>", {
          text: executor_tasks_count,
          id: "exec_task"
        })).highlight();
      }
      return manager_tasks_count = executor_tasks_count = 0;
    });
    month = $(".dropmenu-month").children()[current_month];
    $(".dropdown-togle-month").text(month.textContent + " ").attr("mn", current_month + 1).append("<span class='caret'></span>");
    $(".dropdown-togle-year").text(current_year + " ").append("<span class='caret'></span>");
    return $(".calendar_day_wrapper").click(function(e) {
      var $div_clone, $offset;
      clicked_day = $(this).children().first().data();
      $offset = $(this).offset();
      $div_clone = $(this).clone();
      $(this).parent().append($div_clone);
      $div_clone.css({
        "position": "absolute"
      }).offset(function(i, val) {
        return {
          left: $offset.left - 15,
          top: $offset.top - 15
        };
      }).width(function(i, val) {
        return val + 30;
      }).addClass("clone");
      $div_clone.children().first().html("<a><span id='create_task'>Создать задачу</span></a><a><span id='tasks_of_day'>Посмотреть задачи</span></a>");
      $div_clone.mouseleave(function() {
        return $(this).remove();
      });
      $("#create_task").click(function(e) {
        e.stopPropagation();
        return create_task(prepare_date(clicked_day));
      });
      return $("#tasks_of_day").click(function(e) {
        e.stopPropagation();
        return show_tasks(prepare_date(clicked_day));
      });
    });
  };
};


/*
$(document).on('page:load ready', ->
  window.calendar = Calendar()
  window.reload_calendar = ->
    timeout = setTimeout( ->
      calendar(ajax:true, month: $(".dropdown-togle-month").attr("mn"), year: $(".dropdown-togle-year").text())
    ,2500)
    
  calendar(ajax: true)
  #обработчик на заголовке
  $(".list-month").click( ->
      calendar(month: $(this).index()+1, year: $(".dropdown-togle-year").text())
      )

  $(".list-year").click( ->
    calendar(month: $(".dropdown-togle-month").attr("mn"), year: $(this).text(), ajax:true)
    )
)
 */

window.calendar = Calendar();

window.create_calendar = function() {
  calendar({
    ajax: true
  });
  $(".list-month").click(function() {
    return calendar({
      month: $(this).index() + 1,
      year: $(".dropdown-togle-year").text()
    });
  });
  return $(".list-year").click(function() {
    return calendar({
      month: $(".dropdown-togle-month").attr("mn"),
      year: $(this).text(),
      ajax: true
    });
  });
};

window.reload_calendar = function() {
  var timeout;
  return timeout = setTimeout(function() {
    return calendar({
      ajax: true,
      month: $(".dropdown-togle-month").attr("mn"),
      year: $(".dropdown-togle-year").text()
    });
  }, 2500);
};
